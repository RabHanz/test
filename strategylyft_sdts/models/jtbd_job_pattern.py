# -*- coding: utf-8 -*-
from odoo import models, fields, api, _ # Added api, _
import logging # Added logging
_logger = logging.getLogger(__name__) # Added logger


class JtbdJobPattern(models.Model):
    _name = 'jtbd.job.pattern'
    _description = 'JTBD Pattern'
    _order = 'sequence, name'

    name = fields.Char(
        string='Pattern Name', required=True, translate=True,
        help="A concise name for this JTBD pattern."
    )

    description = fields.Text(
        string='Description', translate=True,
        help="Detailed description of the job pattern, its context, and nuances."
    )

    sequence = fields.Integer(default=10)
    active = fields.Boolean(default=True)


    job_category_id = fields.Many2one(
        'jtbd.job.category', string='Job Category', index=True, required=True,
        ondelete='restrict', # Prevent deleting category if used by pattern
        help="Select the primary job category this pattern relates to."
    )


    situation_template = fields.Text(string='Situation Template', translate=True)
    motivation_template = fields.Text(string='Motivation Template', translate=True)
    outcome_template = fields.Text(string='Outcome Template', translate=True)
    applicable_agency_type_ids = fields.Many2many(
        'jtbd.agency.type',
        'jtbd_job_pattern_agency_type_rel', # Relation table name
        'pattern_id', 'agency_type_id', # Column names
        string='Applicable Agency Types',
        help="Select the agency types this job pattern typically applies to."
    )
    applicable_tech_stack_ids = fields.Many2many(
        'jtbd.tech.stack',
        'jtbd_job_pattern_tech_stack_rel', # Relation table name
        'pattern_id', 'tech_stack_id', # Column names
        string='Applicable Tech Stacks',
        help="Select technologies or tools commonly associated with this job pattern."
    )
    frequency_score = fields.Float(
        string='Frequency Score', digits=(16, 2), readonly=True, copy=False,
        help="Occurrence frequency score (0-1) indicating how often this pattern is observed (Calculated externally/P4+)."
    )
    notes = fields.Text(string='Internal Notes')
    jtbd_ai_personalization_suggestions = fields.Text(
        string="AI Personalization Angle Suggestions", readonly=True, copy=False,
        help="Placeholder: Suggestions generated by AI for personalizing content for this pattern."
    )
    
    # --- Add Field for PRD3 Enhanced Flow ---
    jtbd_source_type_applicability = fields.Selection(
        selection=[ # Example selection - refine based on actual source labels used
             ('all', 'All Sources'),
             ('manual_only', 'Manual/Validated Only'),
             ('funnel_only', 'Funnel Data Only'),
             ('scraped_only', 'Scraped Data Only'),
             ('high_confidence', 'High Confidence Sources Only (>0.8)'),
             # Add specific funnel options if needed
             # ('funnel_1', 'Funnel 1: Webinar'), ...
             ],
        string="Source Type Applicability", default='all',
        help="Specifies which type of data source this pattern is most applicable to or derived from."
    )
    # --- End PRD3 Enhanced Flow Field ---


    jtbd_trace_link_count = fields.Integer(compute='_compute_trace_link_count', string="# Trace Links")

    def _compute_trace_link_count(self):
        TraceLink = self.env['jtbd.trace.link']
        trace_link_model_id = self.env['ir.model']._get_id(self._name)
        if not trace_link_model_id:
            for record in self: record.jtbd_trace_link_count = 0
            return
        for record in self:
            try:
                count = TraceLink.search_count([ ('source_model_id', '=', trace_link_model_id), ('source_res_id', '=', record.id) ])
                record.jtbd_trace_link_count = count
            except Exception as e:
                 _logger.error(f"Error counting trace links for Job Pattern {record.id}: {e}", exc_info=True)
                 record.jtbd_trace_link_count = 0

    def action_open_trace_links(self):
        self.ensure_one()
        source_model_id = self.env['ir.model']._get_id(self._name)
        return {
            'name': _('Create Trace Link for Job Pattern'), 'type': 'ir.actions.act_window',
            'res_model': 'jtbd.create.trace.link.wizard', 'view_mode': 'form', 'target': 'new',
            'context': { 'default_source_model_id': source_model_id, 'default_source_res_id': self.id,
                         'default_name': f'Link for Pattern: {self.name[:30]}...' }}