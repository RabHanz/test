<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1"> <!-- Keep noupdate=1 -->

        <!-- Server Action: Python Code to Log Job Evolution -->
        <record id="server_action_log_job_evolution" model="ir.actions.server">
            <field name="name">JTBD - Code: Log Job Evolution</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code">
# Available variables: env, model, records, record, log, time, datetime, dateutil, timezone, workflow
# 'record' is the crm.lead record being updated
if record:
    log(f"JTBD Evolution Triggered for Lead: {record.name} (ID: {record.id}) due to update.")
    try:
        # Prepare state descriptions using the new M2O field name
        prev_category_name = record.jtbd_job_category_id.name if record.jtbd_job_category_id else 'N/A'
        prev_state_desc = f"Snapshot Approx: Stage={record.stage_id.name}, Category={prev_category_name}"

        new_category_name = record.jtbd_job_category_id.name if record.jtbd_job_category_id else 'N/A'
        new_state_desc = f"Current State: Stage={record.stage_id.name}, Category={new_category_name}, Statement Excerpt='{record.jtbd_job_statement[:100] if record.jtbd_job_statement else ''}...'"

        # Use datetime and timezone objects correctly from context
        now_aware_utc = datetime.datetime.now(timezone('UTC'))
        # Odoo ORM typically expects naive datetime for Datetime fields, adjusted to user's TZ on display
        # Let's try creating with aware UTC, ORM might handle conversion. If not, use naive.
        # now_naive_utc = now_aware_utc.replace(tzinfo=None) # Alternative if aware causes issues

        # Create the evolution record
        evo_vals = {
            'lead_id': record.id,
            'change_date': now_aware_utc, # Use aware UTC datetime
            'previous_state_description': prev_state_desc,
            'new_state_description': new_state_desc,
            'transition_trigger': 'Lead Fields Updated (Stage, Statement, Category, Quadrant)',
            'user_id': env.user.id,
        }
        new_evo = env['jtbd.job.evolution'].create(evo_vals)
        log(f"Created jtbd.job.evolution record {new_evo.id} for Lead {record.id}")
        # --- Phase 4 Placeholder: Trigger external analysis? ---
        # payload = {'evolution_id': new_evo.id, 'lead_data': record.read([...fields...])[0]}
        # log(f"Simulating webhook call for Job Evolution: {payload}")
        # --- End Placeholder ---
    except Exception as e:
        # Use log(message, level='error')
        log(f"Error creating Job Evolution record for Lead {record.id}: {e}", level='error')

            </field>
        </record>

        <!-- Server Action: Python Code to Log Content Alignment Check -->
        <record id="server_action_log_content_alignment_check" model="ir.actions.server">
            <field name="name">JTBD - Code: Log Content Alignment Check</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code">
# Available variables: env, model, records, record, log, time, datetime, dateutil, timezone, workflow
if record and record.jtbd_content_approval_state in ('approved', 'rejected', 'pending_review'):
    log(f"JTBD Content Alignment Check Triggered for Lead: {record.name} (ID: {record.id}). Approval State: {record.jtbd_content_approval_state}")
    msg = f"Content Approval State changed to '{record.jtbd_content_approval_state}'. Review Content Alignment scores and potentially trigger content updates."
    # Use the standard message_post method available on the record
    record.message_post(body=msg, subtype_id=env.ref('mail.mt_note').id)
    # --- Phase 4 Placeholder: Trigger external Content Brain action ---
    # payload = {'lead_id': record.id, 'approval_state': record.jtbd_content_approval_state}
    # log(f"Simulating webhook call for Content Approval State change: {payload}")
    # --- End Placeholder ---
elif record: # Check if record exists before logging skip message
     log(f"JTBD Content Alignment Check Skipped for Lead: {record.name} (State: {record.jtbd_content_approval_state})")
else:
     log("JTBD Content Alignment Check Skipped: No record found.", level="warning")

            </field>
        </record>

        <!-- Server Action: Python Code to Simulate Webhook AND Update Lead -->
        <record id="server_action_simulate_webhook_force_analysis" model="ir.actions.server">
            <field name="name">JTBD - Code: Process Force Analysis Update (Webhook &amp; Lead Sync)</field>
            <field name="model_id" ref="jtbd_odoo_crm.model_jtbd_force_analysis"/>
            <field name="state">code</field>
            <field name="code">
# Available variables: env, model, records, record, log, time, datetime, dateutil, timezone, workflow
if record and record.lead_id:
    log(f"JTBD Trigger: Force Analysis {record.name} (ID: {record.id}) updated. Processing...")
    # --- 1. Simulate Webhook Call ---
    try:
        payload = {
            'source': 'odoo_jtbd_force_analysis_update', 'analysis_id': record.id, 'analysis_name': record.name,
            'lead_id': record.lead_id.id, 'lead_name': record.lead_id.name,
            'timestamp_utc': datetime.datetime.now(timezone('UTC')).isoformat() + 'Z',
            'scores': {'momentum': record.momentum_score, 'signal': record.signal_strength, 'push': record.push_score, 'pull': record.pull_score, 'anxiety': record.anxiety_score, 'habit': record.habit_score, },
            'trigger_window': record.trigger_window, 'intensity': record.intensity_score, 'contract_loss': record.contract_loss,
            'updated_by_user_id': env.user.id
        }
        log(f"Simulated Webhook Payload Prepared: {payload}")
        # --- Placeholder for actual HTTP POST ---
        # log(f"Simulated successful POST to webhook for FA {record.id}")
        # --- End Placeholder ---
        record.message_post(body=f"Force Analysis update detected. Simulated trigger sent.", subtype_id=env.ref('mail.mt_note').id)
    except Exception as e:
         log(f"Error preparing/logging webhook payload for FA {record.id}: {e}", level='error')

    # --- 2. Update Related CRM Lead ---
    try:
        log(f"Attempting to automatically update Lead {record.lead_id.id} from FA {record.id}")
        lead = record.lead_id
        risk_level = 'undefined'
        # Use direct score comparison
        if record.momentum_score &lt; 30: risk_level = 'high'
        elif record.momentum_score &lt; 60: risk_level = 'medium'
        elif record.momentum_score &gt;= 60: risk_level = 'low'

        vals_to_write = {
            'jtbd_momentum_score': record.momentum_score,
            'jtbd_signal_strength': record.signal_strength,
            'jtbd_trigger_window': record.trigger_window or 'undefined',
            'jtbd_contract_loss': record.contract_loss,
            'jtbd_risk_level': risk_level,
        }
        lead.write(vals_to_write)
        log(f"Successfully updated Lead {lead.id} fields from Force Analysis {record.id}.")
        # Optional: Post a reduced note to lead chatter?
        # lead.message_post(body=f"JTBD Analysis fields updated automatically from FA '{record.name}'.", subtype_id=env.ref('mail.mt_note').id)
    except Exception as e:
         log(f"Error automatically updating Lead {record.lead_id.id} from FA {record.id}: {e}", level='error')

elif record: log(f"Skipping Lead update for FA {record.id}: Missing Lead ID.", level='warning')
else: log("Lead update skipped: No record found.", level="warning")
            </field>
        </record>

        <!-- Server Action: Simulate Triggering AI Personalization -->
        <record id="server_action_trigger_ai_personalization" model="ir.actions.server">
            <field name="name">JTBD - Code: Trigger AI Personalization Suggestion</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code">
# Available variables: env, model, records, record, log, time, datetime, dateutil, timezone, workflow
if record:
    log(f"JTBD Placeholder Trigger: AI Personalization generation requested for Lead {record.id} - {record.name}.")
    # --- Phase 4: Prepare context ---
    context_data = {
        'lead_id': record.id,
        'job_category': record.jtbd_job_category_id.name if record.jtbd_job_category_id else '', # Use name from M2O
        'job_statement': record.jtbd_job_statement or '',
        'force_momentum': record.jtbd_momentum_score or 0, # Handle None
        'outcome_metric': record.jtbd_outcome_metric or ''
        }
    log(f"Simulated context for AI personalization: {context_data}")
    # --- Phase 4: Call external n8n/AI endpoint ---
    # response = call_external_service(context_data)
    # result_text = process_response(response)
    result_text = "AI Suggestion: Focus on ROI impact based on outcome metric '%s'." % context_data['outcome_metric'] if context_data['outcome_metric'] else "AI Suggestion: Emphasize alignment with strategic goals."
    # --- Phase 4: Update Odoo field ---
    # record.write({'jtbd_ai_personalized_messaging_angles': result_text}) # Uncomment when ready
    record.message_post(body=f"AI Personalization Triggered (Simulated). Suggestion: {result_text}", subtype_id=env.ref('mail.mt_note').id)
else:
    log("AI Personalization skipped: No record found.", level="warning")
            </field>
        </record>
        
        <!-- Server Action: Trigger Outbound Sequence Start -->
        <record id="server_action_trigger_outbound_sequence" model="ir.actions.server">
            <field name="name">JTBD - Code: Trigger Outbound Sequence Start/Update</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code">
# Available variables: env, model, records, record, log, time, datetime, dateutil, timezone, workflow
# Triggered when outbound fields change
if record and record.jtbd_is_outbound_targeted and record.jtbd_suggested_sequence_id:
    log(f"JTBD Outbound Trigger: Sequence '{record.jtbd_suggested_sequence_id}' suggested/updated for Lead {record.id} ({record.name}). Priority: {record.jtbd_outreach_priority_score or 'N/A'}")
    # --- Phase 4: Placeholder ---
    # Prepare payload for external Outbound Execution Layer (n8n or dedicated tool)
    payload = {
        'lead_id': record.id,
        'odoo_contact_id': record.partner_id.id if record.partner_id else None,
        'email': record.email_from,
        'suggested_sequence_id': record.jtbd_suggested_sequence_id,
        'priority': record.jtbd_outreach_priority_score,
        'job_category': record.jtbd_job_category_id.name if record.jtbd_job_category_id else None,
        # Add other relevant fields for sequence personalization
    }
    log(f"Simulating API call to Outbound Execution Layer: {payload}")
    # --- End Placeholder ---
    record.message_post(body=f"Outbound sequence '{record.jtbd_suggested_sequence_id}' triggered/updated.", subtype_id=env.ref('mail.mt_note').id)
else:
    log(f"Outbound Sequence trigger skipped for Lead {record.id}: Not targeted or no sequence ID.", level='info')
            </field>
        </record>
        <!-- Server Action: Process Simulated Outbound Engagement -->
        <record id="server_action_process_outbound_engagement" model="ir.actions.server">
            <field name="name">JTBD - Code: Process Outbound Engagement Update</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code">
# Triggered by changes potentially pushed back from external system
# (Currently triggered by automation rule on jtbd_outbound_engagement_ids for testing)
if record and record.jtbd_outbound_engagement_ids: # Check if the O2M has records
    log(f"JTBD Outbound Processing: Detected engagement update trigger for Lead {record.id}.")
    # --- Phase 4: Placeholder ---
    # Parse latest engagement, update progression status, scores, etc.
    latest_engagement = record.jtbd_outbound_engagement_ids.sorted(key=lambda r: r.engagement_datetime, reverse=True)
    if latest_engagement:
        latest_eng = latest_engagement[0]
        log(f"Latest engagement: Type={latest_eng.response_type}, Summary='{latest_eng.summary[:50]}...'")
        new_status = False
        if latest_eng.response_type in ('replied_pos', 'meeting_booked'):
            new_status = 'sales_working' # Example: Positive reply moves to sales
        elif latest_eng.response_type == 'replied_neg':
            new_status = 'dormant' # Example: Negative reply goes dormant

        if new_status and record.jtbd_contact_progression_status != new_status:
             log(f"Updating Lead {record.id} progression status from '{record.jtbd_contact_progression_status}' to '{new_status}' based on outbound engagement.")
             try:
                 # Must use write on record, not on computed field directly
                 record.write({'jtbd_contact_progression_status': new_status})
             except Exception as write_e:
                  log(f"Error writing progression status for lead {record.id}: {write_e}", level='error')
    # --- End Placeholder ---
    record.message_post(body=f"Processed outbound engagement trigger.", subtype_id=env.ref('mail.mt_note').id)
else:
     log(f"Outbound Engagement processing skipped for Lead {record.id}: No record or no engagements.", level="warning")

            </field>
        </record>
    </data>
</odoo>