// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  programs      Program[]
  activities    Activity[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Program {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  status      String
  startDate   DateTime
  endDate     DateTime?
  users       User[]
  activities  Activity[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id        String   @id @default(cuid())
  type      String
  status    String
  userId    String
  programId String
  user      User     @relation(fields: [userId], references: [id])
  program   Program  @relation(fields: [programId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AutomationPlatform {
  ZAPIER
  MAKE
  CONVERTKIT
  MAILCHIMP
  HUBSPOT
  CLICKUP
  CALENDLY
}

enum AutomationStatus {
  ACTIVE
  PAUSED
  ERROR
  COMPLETED
  PENDING
}

enum AutomationType {
  WORKFLOW
  TEMPLATE
  WEBHOOK
  SEQUENCE
  TASK
}

model AutomationWorkflow {
  id        String   @id @default(cuid())
  name      String
  platform  AutomationPlatform
  type      AutomationType
  status    AutomationStatus
  trigger   Json
  actions   AutomationAction[]
  metadata  AutomationMetadata?
  metrics   AutomationMetrics?
  logs      AutomationLog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutomationAction {
  id        String   @id @default(cuid())
  type      String
  config    Json
  status    AutomationStatus
  error     String?
  workflow  AutomationWorkflow @relation(fields: [workflowId], references: [id])
  workflowId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutomationMetadata {
  id          String   @id @default(cuid())
  personaType String?
  tags        String[]
  description String
  workflow    AutomationWorkflow @relation(fields: [workflowId], references: [id])
  workflowId  String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AutomationMetrics {
  id                    String   @id @default(cuid())
  successRate          Float
  averageProcessingTime Float
  totalExecutions      Int
  lastExecution        DateTime?
  workflow             AutomationWorkflow @relation(fields: [workflowId], references: [id])
  workflowId           String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model AutomationTemplate {
  id          String   @id @default(cuid())
  name        String
  description String
  platform    AutomationPlatform
  type        AutomationType
  config      Json
  personaType String?
  tags        String[]
  usageCount  Int      @default(0)
  successRate Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WebhookEvent {
  id        String   @id @default(cuid())
  type      String
  payload   Json
  timestamp DateTime @default(now())
  status    String
  platform  AutomationPlatform
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AutomationAlert {
  id         String   @id @default(cuid())
  type       String
  message    String
  workflowId String?
  platform   AutomationPlatform
  timestamp  DateTime @default(now())
  status     String
  resolution String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AutomationRule {
  id         String   @id @default(cuid())
  name       String
  conditions Json
  actions    Json
  priority   Int
  enabled    Boolean  @default(true)
  personaType String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model AutomationLog {
  id        String   @id @default(cuid())
  workflow  AutomationWorkflow @relation(fields: [workflowId], references: [id])
  workflowId String
  platform  AutomationPlatform
  event     String
  status    AutomationStatus
  details   Json
  timestamp DateTime @default(now())
  duration  Float?
  error     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
} 