<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <!-- Server Action: Python Code to Log Job Evolution -->
        <record id="server_action_log_job_evolution" model="ir.actions.server">
            <field name="name">JTBD - Code: Log Job Evolution</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code">
# Available variables: env, model, records, record, log, time, datetime, dateutil, timezone, workflow
# 'record' is the crm.lead record being updated
if record:
    # --- CORRECTED INDENTATION ---
    log(f"JTBD Evolution Triggered for Lead: {record.name} (ID: {record.id}) due to update.")
    # Simple placeholder: Create a basic evolution record
    prev_state_desc = f"Previous State (Snapshot on Trigger): Stage={record.stage_id.name}, Category={record.jtbd_job_category}"
    new_state_desc = f"Current State (Snapshot on Trigger): Stage={record.stage_id.name}, Category={record.jtbd_job_category}"
    env['jtbd.job.evolution'].create({
        'lead_id': record.id,
        'change_date': datetime.datetime.now(),
        'previous_state_description': prev_state_desc,
        'new_state_description': new_state_desc,
        'transition_trigger': 'Lead Fields Updated',
        'user_id': env.user.id,
    })
# --- END CORRECTION ---
            </field>
        </record>

        <!-- Server Action: Python Code to Log Content Alignment Check -->
        <record id="server_action_log_content_alignment_check" model="ir.actions.server">
            <field name="name">JTBD - Code: Log Content Alignment Check</field>
            <field name="model_id" ref="crm.model_crm_lead"/>
            <field name="state">code</field>
            <field name="code">
if record and record.jtbd_content_approval_state in ('approved', 'rejected', 'pending_review'):
    log(f"JTBD Content Alignment Check Triggered for Lead: {record.name} (ID: {record.id}). Approval State: {record.jtbd_content_approval_state}")
    msg = f"Content Approval State changed to '{record.jtbd_content_approval_state}'. Review Content Alignment."
    record.message_post(body=msg, subtype_id=env.ref('mail.mt_note').id)
            </field>
        </record>
        <!-- Server Action: Python Code to Simulate Webhook -->
        <record id="server_action_simulate_webhook_force_analysis" model="ir.actions.server">
            <field name="name">JTBD - Code: Simulate Webhook on Force Analysis Update</field>
            <field name="model_id" ref="jtbd_odoo_crm.model_jtbd_force_analysis"/>
            <field name="state">code</field>
            <field name="code">
# Available variables: env, model, records, record, log, time, datetime, dateutil, timezone, workflow
# Simulate calling an external webhook (e.g., n8n)
# In reality, this would use 'requests' library or Odoo's webhook module
if record:
    log(f"JTBD Placeholder Webhook Triggered: Force Analysis {record.name} (ID: {record.id}) updated.")
    payload = {
        'analysis_id': record.id, 'lead_id': record.lead_id.id, 'momentum': record.momentum_score,
        'signal': record.signal_strength, 'trigger_window': record.trigger_window,
        # Use datetime and timezone objects directly from the context
        'timestamp': datetime.datetime.now(timezone('UTC')).isoformat() + 'Z'
    }
    log(f"Simulated Payload: {payload}")
    # Placeholder: record.message_post(body=f"Webhook triggered for analysis update. Payload: {payload}", subtype_id=env.ref('mail.mt_note').id)
            </field>
        </record>
    </data>
</odoo>