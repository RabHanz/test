# -*- coding: utf-8 -*-

import re # Import regular expressions for better parsing
from odoo import models, fields, api, _
# Import selections from the models where they are defined
from .jtbd_job_pattern import JOB_CATEGORIES
# JOB_QUADRANTS is defined below in this file now

# Define selection values here to avoid duplication
JOB_QUADRANTS = [
    ('functional', 'Functional Job'),
    ('emotional', 'Emotional Job'),
    ('social', 'Social Job'),
    ('strategic', 'Strategic Job'),
    ('other', 'Other'), # Added other
]

# Define minimum length for validation in score calculation
MIN_TEXT_LENGTH_SCORE = 10 # Minimum length considered for basic points

class CrmLead(models.Model):
    _inherit = 'crm.lead'

    # --- Core JTBD Framework Fields ---
    jtbd_job_category = fields.Selection(
        selection=JOB_CATEGORIES,
        string='Job Category',
        index=True,
        tracking=True,
        help="Primary Job-to-be-Done category identified for this opportunity."
    )
    jtbd_job_statement = fields.Text(
        string='Job Statement',
        tracking=True,
        help="Full Job Statement in 'When... I want to... So I can...' format, typically generated by the JTBD Builder."
    )
    jtbd_job_quadrant = fields.Selection(
        selection=JOB_QUADRANTS,
        string='Job Quadrant',
        tracking=True,
        help="Classification of the primary job (Functional, Emotional, Social, Strategic)."
    )
    jtbd_job_clarity_score = fields.Integer(
        string='Job Clarity Score',
        compute='_compute_job_clarity_score',
        store=True, # Store the value in the database
        readonly=True, # Still readonly in UI as it's computed
        tracking=True,
        help="Score (0-100) indicating the clarity and completeness of the identified job statement. Calculated automatically or via JTBD Builder.",
        group_operator="avg",
    )

    # --- Placeholder Fields for Later Phases ---
    # These are added now with basic definitions to reserve the names
    # and avoid errors if referenced early. Full implementation later.

    # Force Analysis related (Phase 2)
    jtbd_force_analysis_count = fields.Integer(
        compute='_compute_jtbd_analysis_counts', string="Force Analyses",
        help="Number of Force Analyses linked to this opportunity (Phase 2)."
    )
    jtbd_momentum_score = fields.Integer(
        string='Momentum Score', readonly=True, tracking=True, group_operator="avg",
        help="Latest calculated momentum score (0-100) from Force Analysis (Phase 2)."
    )
    jtbd_signal_strength = fields.Integer(
        string='Signal Strength', readonly=True, tracking=True, group_operator="avg",
        help="Latest calculated signal strength (0-100) combining intent and triggers (Phase 2)."
    )
    jtbd_trigger_window = fields.Selection(
         [('immediate', 'Immediate (0-30 days)'),
          ('short', 'Short-term (1-3 months)'),
          ('medium', 'Medium-term (3-6 months)'),
          ('long', 'Long-term (6+ months)'),
          ('undefined', 'Undefined')],
         string='Decision Window', readonly=True, tracking=True,
         help="Estimated decision timing based on Force Analysis (Phase 2)."
    )
    jtbd_contract_loss = fields.Boolean(
        string='Recent Contract Loss', readonly=True, tracking=True,
        help="Indicates if a significant contract loss was identified as a trigger (Phase 2)."
    )
    jtbd_risk_level = fields.Selection(
        [('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('undefined', 'Undefined')],
        string='Risk Level', readonly=True, tracking=True,
        help="Risk assessment based on Force Analysis momentum (Phase 2)."
    )

    # Outcome Mapping related (Phase 2)
    jtbd_outcome_mapping_count = fields.Integer(
        compute='_compute_jtbd_analysis_counts', string="Outcome Maps",
        help="Number of Outcome Maps linked to this opportunity (Phase 2)."
    )
    jtbd_outcome_metric = fields.Char(
        string='Primary Outcome Metric', readonly=True, tracking=True,
        help="The primary metric defined in the Outcome Mapping (Phase 2)."
    )
    jtbd_white_space = fields.Text(
        string='White Space Opportunities', readonly=True, tracking=True,
        help="Identified expansion opportunities from Outcome Mapping (Phase 2)."
    )

    # --- Compute Methods ---

    # Correct Dependencies for score calculation
    @api.depends('jtbd_job_statement', 'jtbd_job_category', 'jtbd_job_quadrant')
    def _compute_job_clarity_score(self):
        """
        Compute the job clarity score based on the statement structure,
        length of components, and completeness of selections.
        Uses regex for more robust parsing.
        """
        # Regex to capture parts, making ',' and '.' optional at ends
        # It looks for "when (group1), i want to (group2), so i can (group3)." case-insensitively
        pattern = re.compile(r"when\s+(.*?)(?:,\s*|\s+)i want to\s+(.*?)(?:,\s*|\s+)so i can\s+(.*?)(?:\.?\s*$)", re.IGNORECASE | re.DOTALL)

        for lead in self:
            score = 0
            max_score = 100
            component_weight = 25 # Max points per text component
            selection_weight = 12.5 # Max points per selection component

            situation, motivation, outcome = '', '', ''
            if lead.jtbd_job_statement:
                match = pattern.match(lead.jtbd_job_statement.strip())
                if match:
                    situation = match.group(1).strip()
                    motivation = match.group(2).strip()
                    outcome = match.group(3).strip()

            # Score Situation Length
            if situation:
                situation_len = len(situation)
                # Award points based on length, requiring min length, capped at component_weight
                score += min(component_weight, situation_len * (component_weight / 50.0)) if situation_len >= MIN_TEXT_LENGTH_SCORE else 0

            # Score Motivation Length
            if motivation:
                motivation_len = len(motivation)
                score += min(component_weight, motivation_len * (component_weight / 50.0)) if motivation_len >= MIN_TEXT_LENGTH_SCORE else 0

            # Score Outcome Length
            if outcome:
                outcome_len = len(outcome)
                score += min(component_weight, outcome_len * (component_weight / 50.0)) if outcome_len >= MIN_TEXT_LENGTH_SCORE else 0

            # Score Selections
            if lead.jtbd_job_category:
                score += selection_weight
            if lead.jtbd_job_quadrant:
                score += selection_weight

            # Final Score
            lead.jtbd_job_clarity_score = min(max_score, int(round(score)))

    def _compute_jtbd_analysis_counts(self):
        """ Placeholder compute method for related analysis counts (Phase 2). """
        # Read group is more efficient for counting related records
        # Requires related models and access rights defined in later phases
        # Example:
        # analysis_data = self.env['jtbd.force.analysis']._read_group([('lead_id', 'in', self.ids)], ['lead_id'], ['lead_id:count'])
        # analysis_map = {data['lead_id'][0]: data['lead_id_count'] for data in analysis_data}
        # mapping_data = self.env['jtbd.outcome.mapping']._read_group([('lead_id', 'in', self.ids)], ['lead_id'], ['lead_id:count'])
        # mapping_map = {data['lead_id'][0]: data['lead_id_count'] for data in mapping_data}
        for lead in self:
            lead.jtbd_force_analysis_count = 0 # analysis_map.get(lead.id, 0)
            lead.jtbd_outcome_mapping_count = 0 # mapping_map.get(lead.id, 0)

    # --- Action Methods (Placeholders for Phase 2) ---
    def action_open_jtbd_force_analysis(self):
        """Opens the Force Analysis view for this opportunity."""
        self.ensure_one()
        # Implementation in Phase 2
        # Example action dictionary needs to be returned here
        # Example:
        # action = self.env['ir.actions.act_window']._for_xml_id('jtbd_odoo_crm.action_jtbd_force_analysis_lead') # Assumes action exists
        # action['domain'] = [('lead_id', '=', self.id)]
        # action['context'] = {'default_lead_id': self.id}
        # return action
        pass # Placeholder

    def action_open_jtbd_outcome_mapping(self):
        """Opens the Outcome Mapping view for this opportunity."""
        self.ensure_one()
        # Implementation in Phase 2
        pass # Placeholder