import React from 'react';
import useAnalyticsStore from '../../store/analyticsStore';
import SectionWrapper from './shared/SectionWrapper';
import ChartPlaceholder from './shared/ChartPlaceholder';
import DataCard from './shared/DataCard';
import { TrendingUpIcon, CheckCircleIcon } from '../icons';
import type { KpiCardData } from '../../../types';


const ConversionTrackingSection: React.FC = () => {
  const { conversionTrackingData } = useAnalyticsStore();

  if (!conversionTrackingData) {
    return <div className="text-center p-8 text-gray-300">Loading conversion data...</div>;
  }

  const { funnelVisualization, quizToEmailRate, emailToServiceInquiryRate, serviceInquiryToEnrollmentRate, revenueAttribution } = conversionTrackingData;

  const conversionRateKPIs: KpiCardData[] = [
    { id: 'quiz_email', title: 'Quiz to Email CR', value: `${quizToEmailRate}%`, icon: CheckCircleIcon, tooltip:'Visitors who completed quiz and provided email.' },
    { id: 'email_inquiry', title: 'Email to Service Inquiry CR', value: `${emailToServiceInquiryRate}%`, icon: CheckCircleIcon, tooltip:'Quiz completers (emails) who inquired about a service.' },
    { id: 'inquiry_enroll', title: 'Inquiry to Enrollment CR', value: `${serviceInquiryToEnrollmentRate}%`, icon: CheckCircleIcon, tooltip:'Service inquiries that converted to enrollments.' },
  ];
  
  const totalFunnelConversion = funnelVisualization.length > 0 && funnelVisualization[0].value > 0 ?
    ((funnelVisualization[funnelVisualization.length-1].value / funnelVisualization[0].value) * 100).toFixed(1) + '%' : 'N/A';

  return (
    <div className="space-y-6 md:space-y-8">
      <SectionWrapper title="Full Conversion Funnel" actions={<TrendingUpIcon className="w-5 h-5 text-orange-400"/>}>
        <ChartPlaceholder title="Sales & Conversion Funnel Stages" height="h-96" message="Funnel chart showing stages from Visit to Enrollment, with drop-off rates."/>
        <div className="mt-4 grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-2 text-xs text-center">
            {funnelVisualization.map((step, i) => (
                <div key={step.name} className="bg-gray-700/50 p-2 rounded flex flex-col justify-between">
                    <p className="font-medium text-gray-300 text-[0.65rem] leading-tight sm:text-xs">{step.name}</p>
                    <p className="text-orange-300 text-sm sm:text-base font-bold my-1">{step.value.toLocaleString()}</p>
                    {step.dropOff !== undefined && step.dropOff !== null && <p className="text-red-400 text-[0.6rem] sm:text-xs">({step.dropOff}% drop)</p>}
                </div>
            ))}
        </div>
        <p className="text-sm text-center font-semibold text-white mt-4">Overall Funnel Conversion Rate: <span className="text-orange-400">{totalFunnelConversion}</span></p>
      </SectionWrapper>

      <SectionWrapper title="Key Conversion Rates">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-6">
          {conversionRateKPIs.map((kpi, index) => (
            <DataCard key={kpi.id} item={kpi} index={index} />
          ))}
        </div>
      </SectionWrapper>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <SectionWrapper title="Revenue Attribution by Persona">
          <ChartPlaceholder title="Revenue per Persona" height="h-72" message="Bar chart comparing total revenue generated by each persona."/>
          {/* <div className="mt-2 text-xs text-gray-500">Mock data: {JSON.stringify(revenueAttribution.byPersona)}</div> */}
        </SectionWrapper>
        <SectionWrapper title="Revenue Attribution by Channel">
          <ChartPlaceholder title="Revenue per Channel" height="h-72" message="Bar chart comparing total revenue from different traffic channels."/>
          {/* <div className="mt-2 text-xs text-gray-500">Mock data: {JSON.stringify(revenueAttribution.byChannel)}</div> */}
        </SectionWrapper>
      </div>
    </div>
  );
};

export default ConversionTrackingSection;
